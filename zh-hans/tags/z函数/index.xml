<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>z函数 on Thallium的博客</title><link>https://blog.tgc-thallium.com/zh-hans/tags/z%E5%87%BD%E6%95%B0/</link><description>Recent content in z函数</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>Page(/tags/z函数) (Gengchen)</managingEditor><lastBuildDate>Sat, 19 Jun 2021 10:42:09 -0400</lastBuildDate><atom:link href="/zh-hans/tags/z%E5%87%BD%E6%95%B0/" rel="self" type="application/rss+xml"/><item><title>CodeForces 1539F - Strange Array 题解</title><link>https://blog.tgc-thallium.com/zh-hans/cf1539f/</link><pubDate>Sun, 20 Jun 2021 11:02:09 -0400</pubDate><guid>https://blog.tgc-thallium.com/zh-hans/cf1539f/</guid><description>&lt;p>&lt;a href="https://codeforces.com/contest/1539/problem/F">题目链接&lt;/a>&lt;/p>
&lt;p>思路不难但线段树维护的内容需要一定的技巧。&lt;/p></description></item><item><title>CodeForces 1537E - Erase and Extend 题解</title><link>https://blog.tgc-thallium.com/zh-hans/cf1537e/</link><pubDate>Sat, 19 Jun 2021 10:42:09 -0400</pubDate><guid>https://blog.tgc-thallium.com/zh-hans/cf1537e/</guid><description>&lt;p>当时有个细节没想到，直接fst&lt;/p></description></item><item><title>整体二分学习笔记</title><link>https://blog.tgc-thallium.com/zh-hans/parallel_bsearch/</link><pubDate>Sat, 05 Jun 2021 12:36:59 -0400</pubDate><guid>https://blog.tgc-thallium.com/zh-hans/parallel_bsearch/</guid><description>&lt;p>整体二分在国外称为parallel binary search，是一种用于同时解决大量二分搜索的&lt;strong>离线算法&lt;/strong>。&lt;/p></description></item><item><title>AtCoder Beginner Contest (ABC) 203E 题解</title><link>https://blog.tgc-thallium.com/zh-hans/abc203e/</link><pubDate>Sat, 05 Jun 2021 12:12:09 -0400</pubDate><guid>https://blog.tgc-thallium.com/zh-hans/abc203e/</guid><description>&lt;p>有点不知如何下手的题&lt;/p></description></item><item><title>DFS序/欧拉序的应用（持续更新）</title><link>https://blog.tgc-thallium.com/zh-hans/dfs_ordering/</link><pubDate>Sun, 23 May 2021 11:20:34 -0400</pubDate><guid>https://blog.tgc-thallium.com/zh-hans/dfs_ordering/</guid><description/></item><item><title>二分搜索的两种写法</title><link>https://blog.tgc-thallium.com/zh-hans/bsearch_implementations/</link><pubDate>Sat, 22 May 2021 22:58:56 -0400</pubDate><guid>https://blog.tgc-thallium.com/zh-hans/bsearch_implementations/</guid><description>&lt;p>背景：今天做了个题，用自己平常的二分写法很不方便，第一次碰到这种情况，为了防止后面再碰到类似的情况，决定记录一下二分的两种常见写法。&lt;/p></description></item><item><title>CodeForces 813E - Army Creation题解</title><link>https://blog.tgc-thallium.com/zh-hans/cf813e/</link><pubDate>Fri, 21 May 2021 21:55:47 -0400</pubDate><guid>https://blog.tgc-thallium.com/zh-hans/cf813e/</guid><description>&lt;p>很神奇的技巧&lt;/p></description></item><item><title>使用自定义头文件在算法竞赛中辅助本地调试</title><link>https://blog.tgc-thallium.com/zh-hans/debug_output_header/</link><pubDate>Fri, 21 May 2021 20:22:27 -0400</pubDate><guid>https://blog.tgc-thallium.com/zh-hans/debug_output_header/</guid><description>算法竞赛中主要有两种调试方式：调试器(debugger)和直接输出。调试器适合查看少量或者特定位置的信息，但可能比较费时间并且如果错过了某些信息就要重新运行,而且必须要吐槽gdb输出二维数组全挤在一行根本没法看；而直接输出适合跟踪大量的信息，并且可以方便的查看之前的信息，缺点就是需要在代码中添加额外的语句（可能会很多）并且要在提交之前删掉（即便是输出到标准错误流也会影响性能）。一种解决办法就是使用提前写好的代码/头文件，并结合#ifdef宏和命令行define参数实现区分本地和评测环境，让调试代码在环境中失效。
输出我直接用的现成的pretty printer，然后在代码中加入如下语句：
#ifdef LOCAL #include&amp;lt;pprint.hpp&amp;gt; // https://github.com/p-ranav/pprintpprint::PrettyPrinter P(cerr); #define de(...) P.compact(true);P.print(__VA_ARGS__) #define de_nc(...) P.compact(false);P.print(__VA_ARGS__) #else #define de(...) #define de_nc(...) #endif 注意需要把头文件的目录加到CPLUS_INCLUDE_PATH环境变量里，或者使用-I标记。编译时加上-DLOCAL标记以定义LOCAL，可以换成其他的词，只要保证oj里没有这个标记就行。
如果你使用预编译头文件的话，要把include的那一行放到bits/stdc++.h里，然后重新编译bits/stdc++.h。</description></item><item><title>Google Code Jam 2021 R2 Matrygons题解</title><link>https://blog.tgc-thallium.com/zh-hans/gcj2021_r2_matrygons/</link><pubDate>Sat, 15 May 2021 16:39:16 -0400</pubDate><guid>https://blog.tgc-thallium.com/zh-hans/gcj2021_r2_matrygons/</guid><description>&lt;p>比赛的时候想错方向了😞&lt;/p></description></item><item><title>树和DAG的最小路径覆盖问题</title><link>https://blog.tgc-thallium.com/zh-hans/minimum_path_cover/</link><pubDate>Sat, 08 May 2021 11:25:50 -0400</pubDate><guid>https://blog.tgc-thallium.com/zh-hans/minimum_path_cover/</guid><description>&lt;p>路径覆盖是一个路径的集合使得每个顶点都只被一条路径覆盖。最小路径覆盖问题要求集合中路径的条数是最小的。&lt;/p></description></item></channel></rss>