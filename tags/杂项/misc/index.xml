<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杂项/Misc on Thallim&#39;s Blog</title>
    <link>https://blog.thallium.com/tags/%E6%9D%82%E9%A1%B9/misc/</link>
    <description>Recent content in 杂项/Misc on Thallim&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://blog.thallium.com/tags/%E6%9D%82%E9%A1%B9/misc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Two Ways to Do Segment Union</title>
      <link>https://blog.thallium.com/post/2019-11-30-segunion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.thallium.com/post/2019-11-30-segunion/</guid>
      <description>Klee&amp;rsquo;s Algorithm origin int length_union(const vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; &amp;amp;a) { int n = a.size(); vector&amp;lt;pair&amp;lt;int, bool&amp;gt;&amp;gt; x(n*2); for (int i = 0; i &amp;lt; n; i++) { x[i*2] = {a[i].first, false}; x[i*2+1] = {a[i].second, true}; } sort(x.begin(), x.end()); int result = 0; int c = 0; for (int i = 0; i &amp;lt; n * 2; i++) { if (i &amp;gt; 0 &amp;amp;&amp;amp; x[i].first &amp;gt; x[i-1].first &amp;amp;&amp;amp; c &amp;gt; 0) result += x[i].first - x[i-1].first; if (x[i].second) c--; else c++; } return result; } One algorithm that I learnt from other&amp;rsquo;s code int length_union(const vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; &amp;amp;a) { int n =</description>
    </item>
    
  </channel>
</rss>
