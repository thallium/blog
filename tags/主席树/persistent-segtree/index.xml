<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>主席树/Persistent SegTree on Thallim&#39;s Blog</title>
    <link>https://blog.thallium.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/persistent-segtree/</link>
    <description>Recent content in 主席树/Persistent SegTree on Thallim&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://blog.thallium.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/persistent-segtree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Editorial for HDU6278 - Just h-index</title>
      <link>https://blog.thallium.com/post/2020-04-18-hdu6278/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.thallium.com/post/2020-04-18-hdu6278/</guid>
      <description>主席树！ Solution Using persistent segment tree, we can know the occurrence of all the number in the given interval. We could easily come up with a naive binary search solution which looks like this: int l=0,r=INF; while(l&amp;lt;=r){ int mid=(l+r)&amp;gt;&amp;gt;1; if(occurrence_of_numbers_bigger_than(mid)&amp;gt;=mid) l=mid+1; else r=mid-1; } cout&amp;lt;&amp;lt;r&amp;lt;&amp;lt;endl; Time complexity is $O(q\cdot \log n\cdot \log n)$, which suffices but we can still optimize it. In fact, the binary search part could be done during the query on the segment tree. First let&amp;rsquo;s make some notation: let $[x,y]$ be the interval of the query, $[l,r]$ be the current interval on the</description>
    </item>
    
  </channel>
</rss>
