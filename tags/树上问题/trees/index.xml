<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>树上问题/Trees on Thallim&#39;s Blog</title>
    <link>https://blog.thallium.com/tags/%E6%A0%91%E4%B8%8A%E9%97%AE%E9%A2%98/trees/</link>
    <description>Recent content in 树上问题/Trees on Thallim&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://blog.thallium.com/tags/%E6%A0%91%E4%B8%8A%E9%97%AE%E9%A2%98/trees/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Codeforces 1296F - Berland Beauty and what I learned</title>
      <link>https://blog.thallium.com/post/2020-02-05-cf1296f/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.thallium.com/post/2020-02-05-cf1296f/</guid>
      <description>Learned a lot. In this blog I would like to put emphasis on what I learned from other&amp;rsquo;s implementation. The idea is quite simple: for every edge E find the maximum number that appears in the paths that contain E and set that number for E, then check if there&amp;rsquo;s a contradiction. However, the implementation seems to be not easy. I want to talk about two techniques in this code. The first one is how to find the index of the edge that we are visiting. Instead of using map&amp;lt;pair&amp;lt;int,int&amp;gt;,int&amp;gt; the author uses the lower vertex of each edge to</description>
    </item>
    
  </channel>
</rss>
